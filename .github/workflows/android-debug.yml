name: Android Debug APK (fresh regen + NDK27)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "**/*.dart"
      - "pubspec.yaml"
      - ".github/workflows/android-debug.yml"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK (cmdline-tools + sdkmanager)
        uses: android-actions/setup-android@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Detect Flutter app directory
        shell: bash
        run: |
          set -e
          APP_DIR="."
          for d in "." "shell_app" "app" "mobile" "client"; do
            if [ -f "$d/pubspec.yaml" ]; then APP_DIR="$d"; break; fi
          done
          echo "APP_DIR=$APP_DIR" >> "$GITHUB_ENV"

      - name: Regenerate Android project (clean, embedding v2)
        shell: bash
        run: |
          set -e
          cd "$APP_DIR"
          rm -rf android
          flutter create --platforms=android .

      - name: Install Android NDK 27
        shell: bash
        run: |
          set -e
          yes | sdkmanager --licenses >/dev/null 2>&1 || true
          sdkmanager --install "ndk;27.0.12077973"
          echo "ANDROID_NDK=$ANDROID_SDK_ROOT/ndk/27.0.12077973" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/27.0.12077973" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/27.0.12077973" >> "$GITHUB_ENV"

      - name: Force NDK 27 (global + project properties and gradle files)
        shell: bash
        run: |
          set -e
          APP_DIR="${APP_DIR:-.}"

          # ---- A) Global Gradle user properties (highest precedence) ----
          mkdir -p "$HOME/.gradle"
          if [ -f "$HOME/.gradle/gradle.properties" ]; then
            sed -i -E '/^[[:space:]]*android\.ndkVersion[[:space:]]*=/d' "$HOME/.gradle/gradle.properties"
          fi
          printf 'android.ndkVersion=27.0.12077973\n' >> "$HOME/.gradle/gradle.properties"

          # ---- B) Project gradle.properties (remove any leftover 26.* and set 27) ----
          for GP in "gradle.properties" "$APP_DIR/gradle.properties" "$APP_DIR/android/gradle.properties"; do
            [ -f "$GP" ] || touch "$GP"
            sed -i -E '/^[[:space:]]*android\.ndkVersion[[:space:]]*=/d' "$GP"
            printf 'android.ndkVersion=27.0.12077973\n' >> "$GP"
          done

          # ---- C) app/build.gradle(.kts): ensure ndkVersion block is 27 ----
          FILE="$APP_DIR/android/app/build.gradle.kts"
          if [ -f "$FILE" ]; then
            if grep -q 'ndkVersion' "$FILE"; then
              sed -i 's/ndkVersion *= *"[^"]*"/ndkVersion = "27.0.12077973"/' "$FILE"
            else
              awk '1; /android *\{/ && !done {print "    ndkVersion = \"27.0.12077973\""; done=1}' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
            fi
          fi
          FILE="$APP_DIR/android/app/build.gradle"
          if [ -f "$FILE" ]; then
            if grep -q 'ndkVersion' "$FILE"; then
              sed -i "s/ndkVersion \(['\"][^'\"]*['\"]\)/ndkVersion '27.0.12077973'/" "$FILE"
            else
              awk '1; /android *\{/ && !done {print "    ndkVersion '\''27.0.12077973'\''"; done=1}' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
            fi
          fi

          # ---- D) local.properties with absolute paths (no variables) ----
          mkdir -p "$APP_DIR/android"
          {
            echo "sdk.dir=$ANDROID_SDK_ROOT"
            echo "ndk.dir=$ANDROID_SDK_ROOT/ndk/27.0.12077973"
          } > "$APP_DIR/android/local.properties"

      - name: Flutter pub get
        shell: bash
        run: |
          cd "$APP_DIR"
          flutter pub get

      - name: Build debug APK
        shell: bash
        run: |
          cd "$APP_DIR"
          flutter build apk --debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: ${{ env.APP_DIR }}/build/app/outputs/flutter-apk/app-debug.apk
          if-no-files-found: error
