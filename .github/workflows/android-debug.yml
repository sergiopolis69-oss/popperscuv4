name: Android Debug APK (fresh regen + NDK27)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "**/*.dart"
      - "pubspec.yaml"
      - ".github/workflows/android-debug.yml"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK (cmdline-tools + sdkmanager)
        uses: android-actions/setup-android@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Detect Flutter app directory
        shell: bash
        run: |
          set -e
          APP_DIR="."
          for d in "." "shell_app" "app" "mobile" "client"; do
            if [ -f "$d/pubspec.yaml" ]; then APP_DIR="$d"; break; fi
          done
          echo "APP_DIR=$APP_DIR" >> "$GITHUB_ENV"
          echo "Detected APP_DIR=$APP_DIR"

      - name: Regenerate Android project (clean, embedding v2)
        shell: bash
        run: |
          set -e
          cd "$APP_DIR"
          rm -rf android
          flutter create --platforms=android .

      - name: Force NDK 27 in gradle files
        shell: bash
        run: |
          set -e
          python3 - <<'PY'
          import io, os, re
          app_dir = os.environ.get('APP_DIR','.') or '.'
          for path in [os.path.join(app_dir,'android','app','build.gradle.kts'),
                       os.path.join(app_dir,'android','app','build.gradle')]:
              if os.path.isfile(path):
                  with io.open(path,'r',encoding='utf-8') as f:
                      s = f.read()
                  if 'ndkVersion' not in s:
                      if path.endswith('.kts'):
                          s = re.sub(r'(android\s*\{)', r'\1\n    ndkVersion = "27.0.12077973"', s, count=1)
                      else:
                          s = re.sub(r'(android\s*\{)', r"\1\n    ndkVersion '27.0.12077973'", s, count=1)
                      with io.open(path,'w',encoding='utf-8') as f:
                          f.write(s)
          props = os.path.join(app_dir,'android','gradle.properties')
          os.makedirs(os.path.dirname(props), exist_ok=True)
          with io.open(props,'a',encoding='utf-8') as f:
              f.write('android.ndkVersion=27.0.12077973\n')
          PY

      - name: Install Android NDK 27
        shell: bash
        run: |
          set -e
          sdkmanager --install "ndk;27.0.12077973"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/27.0.12077973" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/27.0.12077973" >> "$GITHUB_ENV"
          echo "ANDROID_NDK=$ANDROID_SDK_ROOT/ndk/27.0.12077973" >> "$GITHUB_ENV"

      - name: Enforce ndk.dir in local.properties
        shell: bash
        run: |
          set -e
          LP="$APP_DIR/android/local.properties"
          mkdir -p "$APP_DIR/android"
          touch "$LP"
          grep -v '^ndk\.dir=' "$LP" > "$LP.tmp" || true
          mv "$LP.tmp" "$LP"
          echo "ndk.dir=$ANDROID_SDK_ROOT/ndk/27.0.12077973" >> "$LP"

      - name: Flutter pub get
        shell: bash
        run: |
          cd "$APP_DIR"
          flutter pub get

      - name: Build debug APK
        shell: bash
        run: |
          cd "$APP_DIR"
          flutter build apk --debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: ${{ env.APP_DIR }}/build/app/outputs/flutter-apk/app-debug.apk
          if-no-files-found: error
