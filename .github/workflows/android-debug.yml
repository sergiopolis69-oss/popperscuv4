name: Android Debug APK (fresh regen + NDK27)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "**/*.dart"
      - "pubspec.yaml"
      - ".github/workflows/android-debug.yml"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK (cmdline-tools + sdkmanager)
        uses: android-actions/setup-android@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Detect Flutter app directory
        shell: bash
        run: |
          set -e
          APP_DIR="."
          for d in "." "shell_app" "app" "mobile" "client"; do
            if [ -f "$d/pubspec.yaml" ]; then APP_DIR="$d"; break; fi
          done
          echo "APP_DIR=$APP_DIR" >> "$GITHUB_ENV"

      - name: Regenerate Android project (clean, embedding v2)
        shell: bash
        run: |
          set -e
          cd "$APP_DIR"
          rm -rf android
          flutter create --platforms=android .

      - name: Install Android NDK 27
        shell: bash
        run: |
          set -e
          yes | sdkmanager --licenses >/dev/null 2>/dev/null || true
          sdkmanager --install "ndk;27.0.12077973"
          NDK_PATH="$ANDROID_SDK_ROOT/ndk/27.0.12077973"
          echo "ANDROID_NDK_HOME=$NDK_PATH" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_ROOT=$NDK_PATH" >> "$GITHUB_ENV"
          echo "ANDROID_NDK=$NDK_PATH" >> "$GITHUB_ENV"

      - name: Enforce NDK 27 everywhere (gradle files + properties)
        shell: bash
        run: |
          set -e
          APP_DIR="${APP_DIR:-.}"
          # 1) local.properties with absolute paths
          LP="$APP_DIR/android/local.properties"
          mkdir -p "$APP_DIR/android"
          {
            echo "sdk.dir=$ANDROID_SDK_ROOT"
            echo "ndk.dir=$ANDROID_SDK_ROOT/ndk/27.0.12077973"
          } > "$LP"
          # 2) gradle.properties (root and android/) -> android.ndkVersion=27.0.12077973
          for GP in "gradle.properties" "$APP_DIR/gradle.properties" "$APP_DIR/android/gradle.properties"; do
            if [ -f "$GP" ]; then
              sed -i -E 's/^[[:space:]]*android\.ndkVersion[[:space:]]*=.*//g' "$GP"
            fi
          done
          echo "android.ndkVersion=27.0.12077973" >> "$APP_DIR/android/gradle.properties"
          # 3) Replace any ndkVersion in ALL gradle files (project and app)
          python3 - <<'PY'
import os, io, re, sys
root = os.environ.get('APP_DIR','.') or '.'
patts = [
    (re.compile(r'ndkVersion\s*=\s*"[^"]+"'), 'ndkVersion = "27.0.12077973"'),   # Kotlin DSL
    (re.compile(r'ndkVersion\s*[\'"][^\'"]+[\'"]'), "ndkVersion '27.0.12077973'") # Groovy DSL
]
for dirpath, _, files in os.walk(os.path.join(root, 'android')):
    for fn in files:
        if fn.endswith(('.gradle','.gradle.kts')):
            p = os.path.join(dirpath, fn)
            with io.open(p, 'r', encoding='utf-8') as f: s = f.read()
            orig = s
            for rx, rep in patts:
                s = rx.sub(rep, s)
            # If no ndkVersion present, inject inside first android { } block
            if 'ndkVersion' not in s:
                s = re.sub(r'(android\s*\{)', r'\1\n    ndkVersion = "27.0.12077973"', s, count=1)
            if s != orig:
                with io.open(p, 'w', encoding='utf-8') as f: f.write(s)
PY

      - name: Flutter pub get
        shell: bash
        run: |
          cd "$APP_DIR"
          flutter pub get

      - name: Build debug APK
        shell: bash
        run: |
          cd "$APP_DIR"
          flutter build apk --debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: ${{ env.APP_DIR }}/build/app/outputs/flutter-apk/app-debug.apk
          if-no-files-found: error
